@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Umbraco.Web
@using solutions.starbucks.web.Controllers
@using solutions.starbucks.Model
@model ResetPasswordViewModel

@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}



@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            var errors = modelState.Errors;

            if (errors.Any())
            { 
                <ul>
                    @foreach(ModelError error in errors)
                    {
                        <li><em>@Html.Raw(error.ErrorMessage)</em></li>
                    }
                </ul>
            }
        }
    </div>
}

@if (Convert.ToBoolean(TempData["ResetSuccess"]))
{
    <h1>Success!</h1>
    <div class="alert alert-success">
        <p>Your password has been successfully reset.</p>
        <a class="btn btn-default pass-reset-done" href="/home">OK</a>
    </div>
}
else
{
    <h1>Create Your New Password</h1>
    <p>Enter your new password below and confirm to complete your reset password process.</p>
    using (Html.BeginUmbracoForm<AccountSurfaceController>("ProcessResetPassword"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <fieldset>
        
            <div class="grouping">
                <label><span class="field-label">Email*</span> @Html.ValidationMessageFor(model => model.EmailAddress, string.Empty, new { @class= "field-error" })</label>
                @Html.TextBoxFor(model => model.EmailAddress, new {@class = "control", placeholder = "Email Address"})
            </div>
        
            <div class="grouping">
                <label><span class="field-label">Password*</span> @Html.ValidationMessageFor(model => model.Password, string.Empty, new { @class= "field-error" })</label>
                @Html.PasswordFor(model => model.Password, new {@class = "control", placeholder = "New Password"})
            </div>
        
            <div class="grouping">
                <label><span class="field-label">Confirm Password*</span> @Html.ValidationMessageFor(model => model.ConfirmPassword, string.Empty, new { @class= "field-error" })</label>
                @Html.PasswordFor(model => model.ConfirmPassword, new {@class = "control", placeholder = "Confirm New Password"})
            </div>
        
            <button type="submit" class="btn btn-default">Submit</button>
            @*<i class="fa fa-spinner fa-spin"></i>*@
            <div class="required-notice">*Indicates Required Field</div>
        </fieldset>
    }
}