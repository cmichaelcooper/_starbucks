@using System.Web.Mvc.Html
@using Umbraco.Web
@using solutions.starbucks.web.Controllers
@using solutions.starbucks.Model
@model RegisterPageFourViewModel

@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
    bool partnerEmail = false;
    
    if (Model.EmailAddress.ToString().Contains("@starbucks.com"))
    {
        partnerEmail = true;       
    }

    bool track = bool.Parse(System.Configuration.ConfigurationManager.AppSettings["EnableGoogleAnalyticsTracking"]) ? true : false;
}

@*<h1>Create Your Profile</h1>*@
<div class="step-wrapper">
    @if (partnerEmail)
    {
        <h2> Step 3: </h2>
    }
    else 
    {
        <h2>Step 4:</h2>
    }
    <h3>Tell Us About Yourself</h3>
 
</div>
<div class="form-wrapper">

    @using (Html.BeginUmbracoForm<RegisterSurfaceController>("ProcessRegistration", null, new { id = "registrationForm" }))
    {
        @Html.AntiForgeryToken()

        <fieldset>
            <div>

                <div class="grouping email reg-four">
                    <label for="EmailAddress"><span class="field-label">Email*</span>@Html.ValidationMessageFor(model => model.EmailAddress, string.Empty, new { @class= "help-block" })</label>
                    @Html.TextBoxFor(model => model.EmailAddress, new{ @class = "form-control", placeholder = "Email Address" })
                </div>
             @if ((!partnerEmail && Model.Attempts < 3) && Model.SkipStep != "1")
             {    
                <div class="grouping accountnumber reg-four">
                    <label for="AccountNumber"><span class="field-validation">Your Starbucks Account Number*</span>@Html.ValidationMessageFor(model => model.AccountNumber, string.Empty, new { @class= "field-error" })</label>
                        @*@Html.LabelFor(model => model.AccountNumber, new { @class = "control-label"})*@
                        <input name="AccountNumber" id="AccountNumber" type="tel" pattern="[0-9]*" placeholder="Account Number" class="form-control" value="@Model.AccountNumber"/>
                        
                </div>

                <div class="grouping zip reg-four">
                    <label for="Zip"><span class="field-validation">Your Zip Code*</span>@Html.ValidationMessageFor(model => model.Zip, string.Empty, new { @class= "field-error" })</label>
                        @*@Html.LabelFor(model => model.Zip, new { @class = "control-label"})*@
                        <input name="Zip" id="Zip" type="tel" pattern="[0-9]*" placeholder="Zip code" class="form-control" value="@Model.Zip" />
                        @*@Html.ValidationMessageFor(model => model.Zip, string.Empty, new { @class= "field-error" })*@
                </div>
             }
                <div class="grouping passwordcreate reg-four">
                    <label for="Password"><span class="field-label">Create A Password*</span>@Html.ValidationMessageFor(model => model.Password, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.Password, new { @class = "control-label"})*@
                    @Html.PasswordFor(model => model.Password, new{ @class = "form-control", placeholder = "Password", Value = Model.Password })
                </div>
        
                <div class="grouping passwordconfirm reg-four">
                    <label for="ConfirmPassword"><span class="field-label">Re-type Password*</span>@Html.ValidationMessageFor(model => model.ConfirmPassword, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label"})*@
                    @Html.PasswordFor(model => model.ConfirmPassword, new{ @class = "form-control", placeholder = "Confirm Password", Value = Model.Password })
                </div>
                  <div class="grouping namefirst reg-four">
                    <label for="Name"><span class="field-label">First Name*</span>@Html.ValidationMessageFor(model => model.FirstName, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.Name, new { @class = "control-label"})*@
                    @Html.TextBoxFor(model => model.FirstName, new{ @class = "form-control", placeholder = "Your First Name" })
                    @*@Html.ValidationMessageFor(model => model.FirstName, string.Empty, new { @class= "field-error" })*@
                </div>
                <div class="grouping namelast reg-four">
                    <label for="LastName"><span class="field-label">Last Name*</span>@Html.ValidationMessageFor(model => model.LastName, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.Name, new { @class = "control-label"})*@
                    @Html.TextBoxFor(model => model.LastName, new{ @class = "form-control", placeholder = "Your Last Name" })
                </div>
                <div class="grouping title reg-four">
                    <label for="Title"><span class="field-label">Your Title/Role*</span>@Html.ValidationMessageFor(model => model.Title, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.Title, new { @class = "control-label"})*@
                    @Html.TextBoxFor(model => model.Title, new{ @class = "form-control", placeholder = "Job title" })
                    @*@Html.ValidationMessageFor(model => model.Title, string.Empty, new { @class= "field-error" })*@
                </div>
             @if (!partnerEmail)
             {    
                <div class="grouping companyname reg-four">
                    <label for="CompanyName"><span class="field-label">Company*</span>@Html.ValidationMessageFor(model => model.CompanyName, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.CompanyName, new { @class = "control-label"})*@
                    @Html.TextBoxFor(model => model.CompanyName, new{ @class = "form-control", placeholder = "Company Name" })
                    @*@Html.ValidationMessageFor(model => model.CompanyName, string.Empty, new { @class= "field-error" })*@
                </div>
                
                <div class="grouping city reg-four">
                    <label for="City"><span class="field-label">City*</span>@Html.ValidationMessageFor(model => model.City, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.CompanyName, new { @class = "control-label"})*@
                    @Html.TextBoxFor(model => model.City, new{ @class = "form-control", placeholder = "City" })
                    @**@
                </div>
                
                <div class="grouping state reg-four">
                    <label for="State"><span class="field-label">State/Province*</span>@Html.ValidationMessageFor(model => model.State, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.CompanyName, new { @class = "control-label"})*@
                    @Html.TextBoxFor(model => model.State, new{ @class = "form-control", placeholder = "State" })
                    @*@Html.ValidationMessageFor(model => model.State, string.Empty, new { @class= "field-error" })*@
                </div>
             }
               <div class="grouping phonenumber reg-four">
                    <label for="PhoneNumber"><span class="field-label">Work Phone*</span>@Html.ValidationMessageFor(model => model.PhoneNumber, string.Empty, new { @class= "field-error" })</label>
                    @*@Html.LabelFor(model => model.PhoneNumber, new { @class = "control-label"})*@
                    <!-- @Html.TextBoxFor(model => model.PhoneNumber, new{ @class = "form-control", placeholder = "Phone number" }) -->
                    <input name="PhoneNumber" id="PhoneNumber" data-val="true" data-val-required="Enter Work Phone" type="tel" pattern="[0-9]*" placeholder="Phone number" class="form-control" />
                    @*@Html.ValidationMessageFor(model => model.PhoneNumber, string.Empty, new { @class= "field-error" })*@
                </div>

                <div class="grouping mobilephone reg-four">
                    <label for="MobilePhone">Mobile</label>
                    @*@Html.LabelFor(model => model.PhoneNumber, new { @class = "control-label"})*@
                    <!-- @Html.TextBoxFor(model => model.MobilePhone, new{ @class = "form-control", placeholder = "Mobile Phone" }) -->
                    <input name="MobilePhone" id="MobilePhone" type="tel" pattern="[0-9]*" placeholder="Mobile Phone" class="form-control" />
                    @*@Html.ValidationMessageFor(model => model.MobilePhone, string.Empty, new { @class= "field-error" })*@
                </div>

                <div class="grouping phone-option reg-four">
                    <label for="OptionalDetails"><span class="field-label">Extension</span></label>
                    @Html.TextBoxFor(model => model.OptionalDetails, new{ @class = "form-control", placeholder = "Extension" })
                </div>
                
        
                @Html.HiddenFor(model => model.NextPage)
                @Html.HiddenFor(model => model.PreviousPage)

                <div class="required-notice">*Indicates Required Field</div>
                <div class="register-buttons">
                    <button type="submit" class="btn btn-default">Continue</button>
                    <span class="loading">
                        @* <i class="fa fa-circle-o-notch fa-spin"></i>  *@
                        <img src="/img/form-icons/loading.gif" width="16" height="16" /> <span class="text">Loading...</span>
                    </span>
                    @*<button type="submit" class="btn btn-default">Submit</button>*@
                    @*<a class="btn btn-back" href="/Register?page=three">Back</a>*@
                </div>
                
            </div>
        </fieldset>
    

    }

</div>
@if (track)
{
    <script type="text/javascript">
        $(document).ready(function () {
             _kmq.push(['record', 'Completed Step 3']);
        });
    </script>
}