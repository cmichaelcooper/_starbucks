@using System.Web.Mvc.Html
@using solutions.starbucks.web.Controllers
@using solutions.starbucks.Model
@using solutions.starbucks.Model.Pocos
@using Umbraco.Web
@model MemberReportViewModel
@{
    System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("en-US");
    
}

<script type="text/javascript">
    function filterClick(applyFilter) {
        $('#activeFilter').val(applyFilter);
        switch (applyFilter)
        {
            case 'inactive':
                $('#inactive').show();
                $('#input-filter-inactive').show();
                $('#nonactive').hide();
                $('#input-filter-nonactive').hide();
                $('#active').hide();
                $('#input-filter-active').hide();
                $('#partner').hide();
                $('#input-filter-partner').hide();
                break;

            case 'nonactive':
                $('#inactive').hide();
                $('#input-filter-inactive').hide();
                $('#nonactive').show();
                $('#input-filter-nonactive').show();
                $('#active').hide();
                $('#input-filter-active').hide();
                $('#partner').hide();
                $('#input-filter-partner').hide();
                break;

            case 'active':
                $('#inactive').hide();
                $('#input-filter-inactive').hide();
                $('#nonactive').hide();
                $('#input-filter-nonactive').hide();
                $('#active').show();
                $('#input-filter-active').show();
                $('#partner').hide();
                $('#input-filter-partner').hide();
                break;

            case 'partner':
                $('#inactive').hide();
                $('#input-filter-inactive').hide();
                $('#nonactive').hide();
                $('#input-filter-nonactive').hide();
                $('#active').hide();
                $('#input-filter-active').hide();
                $('#partner').show();
                $('#input-filter-partner').show();
                break;
        }
    }

    $(document).ready(function () {
        $('#inactive').hide();
        $('#nonactive').hide();
        $('#partner').hide();
        $('#active').show();

        $('#activeMembers').filterTable({
            inputSelector: '#input-filter-active'
        });
        $('#nonActiveMembers').filterTable({
            inputSelector: '#input-filter-nonactive'
        });
        $('#inactiveMembers').filterTable({
            inputSelector: '#input-filter-inactive'
        });
        $('#partnerMembers').filterTable({
            inputSelector: '#input-filter-partner'
        });
    });

</script>

@if (TempData["CustomerEmail"] != null)
{
    <div class="notification-overlay__admin">
        
        <span class="notification-body__admin">Reactivation Email Sent</span>

    </div>
}

<h3 class="table-header">Filter Users By:</h3>

<input class="admin-search" type="text" name="SearchTerm" id="input-filter-active" placeholder="Search" />
<input class="admin-search" type="text" name="SearchTerm" id="input-filter-nonactive" placeholder="Search" style="display:none;" />
<input class="admin-search" type="text" name="SearchTerm" id="input-filter-inactive" placeholder="Search" style="display:none;" />
<input class="admin-search" type="text" name="SearchTerm" id="input-filter-partner" placeholder="Search" style="display:none;" />
<button class="btn btn-default admin-filter" onclick="filterClick('inactive');">Deactivated Users</button>
<button class="btn btn-default admin-filter" onclick="filterClick('nonactive');">Non-Active Users</button>
<button class="btn btn-default admin-filter" onclick="filterClick('partner');">Partners</button>
<button class="btn btn-default admin-filter" onclick="filterClick('active');">Active Users</button>

<div id="active">
    <h3 class="table-header">Current Active Users (@Model.ActiveMembers.Count().ToString() total)</h3>
    @*<input id="activeFilter" name="ActiveFilter" value="filter results" />*@
    <table id="activeMembers" class="table member-list">
        <tr>
            <th class="column-email">Email</th>
            <th class="column-accounts">Connected Accounts</th>
            <th class="column-name">Name</th>
            <th class="column-last-logged">Last Login Date</th>
            <th class="column-status">Customer Status</th>
            <th class="column-button"></th>
        </tr>
    @{var i = 0;
      foreach (var member in Model.ActiveMembers.OrderBy(m => m.Email))
      {
        <tr class="@(++i % 2 == 0 ? "even" : "odd")">
            <td class="column-email">@member.Email</td>
            <td class="column-accounts">
                @{
                  if (!String.IsNullOrEmpty(Model.AssociatedAccounts.Where(a => a.Key == member.Id).SingleOrDefault().Value))
                  {
                      <text>@Model.AssociatedAccounts.Where(a => a.Key == member.Id).SingleOrDefault().Value</text>
                  }
}
            </td>
            <td>@member.Name</td>
            <td class="">
                @if (!String.IsNullOrEmpty(member.Properties["lastLoggedIn"].Value.ToString()))
                {
                    @DateTime.ParseExact(member.Properties["lastLoggedIn"].Value.ToString(), "dd/MM/yyyy @ HH:mm:ss", null).ToString("MMMM dd, yyyy", ci) 
                }
                else {
                    <text>
                        &nbsp;
                    </text>
                }
            </td>
            <td class="column-status">Verified Customer</td>
            <td class="column-buttons">
                @using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberInactivation")) {
                    <input type="hidden" name="CustomerEmail" value="@member.Email" />
                    <button class="admin-function deactivate" type="submit">Deactivate User &raquo;</button>
                }
            </td>

        </tr>
        }
    }

</table>
</div>
<div id="nonactive">
    <h3 class="table-header">Current Non-Active Users (@Model.NonActiveMembers.Count().ToString() total)</h3>
    @*<input id="nonactiveFilter" name="NonactiveFilter" value="filter results" />*@
    <table id="nonActiveMembers" class="table member-list">
        <tr>
            <th class="column-email">Email</th>
            <th class="column-accounts">Connected Accounts</th>
            <th class="column-name">Name</th>
            <th class="column-last-logged">Last Login Date</th>
            <th class="column-status">Customer Status</th>
            <th class="column-button"></th>
        </tr>
        @{ i = 0;
           foreach (var member in Model.NonActiveMembers.OrderBy(m => m.Name))
           {
            <tr class="@(++i % 2 == 0 ? "even" : "odd")">
                <td class="column-email">@member.Email</td>
                <td>@{
               if (!String.IsNullOrEmpty(Model.AssociatedAccounts.Where(a => a.Key == member.Id).SingleOrDefault().Value))
               {
                <text>@Model.AssociatedAccounts.Where(a => a.Key == member.Id).SingleOrDefault().Value</text>
               }
                }
                </td>
                <td>
                    @member.Name
                </td>
                <td class="column-last-logged">
                    @if (!String.IsNullOrEmpty(member.Properties["lastLoggedIn"].Value.ToString()))
                    {
                        @DateTime.ParseExact(member.Properties["lastLoggedIn"].Value.ToString(), "dd/MM/yyyy @ HH:mm:ss", null).ToString("MMMM dd, yyyy", ci)
                    }
                    else
                    {
                        <text>
                            &nbsp;
                        </text>
                    }
                </td>
                <td class="column-status">
                    @switch (member.Properties["hasVerifiedEmail"].Value.ToString() + member.Properties["validatedAccountNumber"].Value.ToString())
                    {
                        case "00":
                            @:Unverified Account &amp; Email
                            break;
                        case "01":
                            @:Email Not Verified
                            break;
                        case "10":
                           @:Account Not Verified
                            break;
                        default:
                            @:Unverified
                            break;
                    }
                </td>
                <td class="column-buttons">
                    @using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessResendEmail"))
                    {
                    <input type="hidden" name="CustomerEmail" value="@member.Email" />
                    <button class="admin-function resend" type="submit">Resend Email &raquo;</button>
                    }
                    @using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessVerifyEmail"))
                    {
                        <input type="hidden" name="CustomerEmail" value="@member.Email" />
                        <button class="admin-function activate" type="submit">Verify Email &raquo;</button>
                    }
                </td>

            </tr>
           }
        }
    </table>
</div>
<div id="inactive">
    <h3 class=" table-header">Current Deactivated Users (@Model.InactiveMembers.Count().ToString() total)</h3>
    @*<input id="inactiveFilter" name="InactiveFilter" value="filter results" />*@
    <table id="inactiveMembers" class="table member-list">
        <tr>
            <th class="column-email">Email</th>
            <th class="column-accounts">Connected Accounts</th>
            <th class="column-name">Name</th>
            <th class="column-buttons"></th>
        </tr>
        
        @{i = 0;
        foreach (var member in Model.InactiveMembers.OrderBy(m => m.Email))
        {
        <tr class="@(++i % 2 == 0 ? "even" : "odd")">
            <td class="column-email">@member.Email</td>
            <td class="column-accounts">
                @{
            if (!String.IsNullOrEmpty(Model.AssociatedAccounts.Where(a => a.Key == member.Id).SingleOrDefault().Value))
            {
                <text>@Model.AssociatedAccounts.Where(a => a.Key == member.Id).SingleOrDefault().Value</text>
            }
                }
            </td>
            <td>@member.Name</td>
            <td class="column-buttons">
                @using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberActivation"))
                {
                    <input type="hidden" name="CustomerEmail" value="@member.Email" />
                    <button class="admin-function activate" type="submit">Activate User &raquo;</button>
                }
            </td>
        </tr>
        }
    }
    </table>
</div>
<div id="partner">
    <h3 class="table-header">Partners (@Model.PartnerMembers.Count().ToString() total)</h3>
    <table id="partnerMembers" class="table partner">
        <tr>
            <th class="column-email">Email</th>
            <th class="column-name">Name</th>
            <th class="column-last-logged">Last Login Date</th>
            <th class="column-status">Customer Status</th>
            <th class="column-buttons"></th>
        </tr>
        @{i = 0;
        foreach (var member in Model.PartnerMembers.OrderBy(m => m.Name))
        {
            if (!Roles.IsUserInRole(member.Email, "SuperPartnerAdmin"))
            {
                <tr class="@(++i % 2 == 0 ? "even" : "odd")">
                    <td class="column-email">@member.Email</td>
                    <td class="column-name">@member.Name</td>
                    <td class="column-last-logged">
                        @if (!String.IsNullOrEmpty(member.Properties["lastLoggedIn"].Value.ToString()))
                        {
                            @DateTime.ParseExact(member.Properties["lastLoggedIn"].Value.ToString(), "dd/MM/yyyy @ HH:mm:ss", null).ToString("MMMM dd, yyyy", ci)
                        }
                        else
                        {
                            <text>
                                &nbsp;
                            </text>
                        }

                    </td>
                    <td class="column-status">Active Partner </td>
                    <td class="column-buttons">
                        @using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberInactivation"))
                        {
                            <input type="hidden" name="CustomerEmail" value="@member.Email" />
                            <button class="admin-function deactivate" type="submit">Deactivate User &raquo;</button>
                        }
                    </td>

                </tr>
            }
        }
        }
    </table>
</div>