@using System.Web.Mvc.Html
@using solutions.starbucks.web.Controllers
@using solutions.starbucks.Model
@using solutions.starbucks.Model.Pocos
@using Umbraco.Web
@model ProfileViewModel

@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
    
    var member = umbraco.cms.businesslogic.member.Member.GetCurrentMember();
    bool isPartner = Convert.ToBoolean(TempData["IsCurrentUserPartner"]);
    bool isPartnerAdmin = Convert.ToBoolean(TempData["IsCurrentUserPartnerAdmin"]);
    bool impersonation = Convert.ToBoolean(TempData["Impersonation"]);
    bool inactiveAccount = Convert.ToBoolean(TempData["InactiveCustomer"]);
    bool invalidCustomer = Convert.ToBoolean(TempData["InvalidAccount"]);
    string customerEmail = TempData["CustomerEmail"] != null ? TempData["CustomerEmail"].ToString() : "";
    string accountClass = invalidCustomer && Model.Attempts != 3 ? "active" : "inactive";
    string buttonClass = invalidCustomer ? " inactive" : "";
    bool track = bool.Parse(System.Configuration.ConfigurationManager.AppSettings["EnableGoogleAnalyticsTracking"]) ? true : false;
    int count = 0;
    string currentAccount = "";
}

@if (isPartnerAdmin)
{
    @*
    <a href="/member-list" style="color:#000;">Click here to view a member audit report</a>
    
    using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberImpersonation"))
    {
        if (Convert.ToBoolean(TempData["InvalidCustomerEmail"]))
        {
            <span class="error">No customer found with that email address. Please try again.</span>
        } 
        else
        {
            <label>Enter a customer email to edit their profile: </label>
        }
        <input type="text" name="CustomerEmail" placeholder="Customer Email" />
        <input type="submit" value="Submit" />
    }
    
    using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberImpersonation"))
    {
        if (impersonation)
        {
            <input type="hidden" name="CustomerEmail" value="@member.Email" />
            <input type="submit" value="Return to your profile." />
        }

    }
    if (impersonation)
    {
        if (inactiveAccount)
        {
            using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberActivation"))
            {
                <input type="hidden" name="CustomerEmail" value="@customerEmail" />
                <label class="alert">This user is marked as inactive. </label>
                <input type="submit" value="Click here to re-activate account" />
            }
        }
        else
        {
            using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessMemberInactivation"))
            {
                <input type="hidden" name="CustomerEmail" value="@customerEmail" />
                <input type="submit" value="Mark user as inactive" />
            }
        }
        
    }*@
}

@if (Convert.ToBoolean(TempData["Success"]))
{
    <div class="alert alert-success">
        <p>You have successfully updated your profile.</p>
    </div>
}
@foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            var errors = modelState.Errors;

            if (errors.Any())
            {
                <ul>
                    @foreach (ModelError error in errors)
                    {
                        <li>
                            @error.ErrorMessage
                        </li>
                    }
                </ul>
            }
        }
@using (Html.BeginUmbracoForm<ProfileSurfaceController>("ProcessProfileEdit"))
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary(true);
         
    <fieldset>
        @if (!isPartner && !isPartnerAdmin)    
        {
            <section>
                <a name="Account"></a>
                <header class="account-set-height">
                    <h3 class="detail-labels">My Accounts</h3>
                    <h4>Need Account Help?</h4>

                    <span class="contact"><a id="MyAccounts" href="/contact-form">Contact Customer Service &raquo;</a></span>
                    @if (Model.Attempts == 3)
                    {
                        <h5 class="account-warning">We were unable to add an account to your profile at this time. Further attempts have been disabled temporarily for security reasons. If you would like help with recovering your account information, please <a href="/forgot-account">request your account information here</a>.</h5>
                    }
                    else
                    {
                        if (Convert.ToInt32(TempData["AccountValidCount"]) > 0)
                        {
                            <h5 class="account-warning">The account number or zip code entered does not match our records. After @(3 - Convert.ToInt32(TempData["AccountValidCount"])) more incorrect attempt(s) the ability to add an account at this time will be temporarily disabled. If you're having trouble, you can always <a href="/forgot-account">request your account information here</a>.</h5>
                        }
                        <div id="add-account-action" class="btn btn-default add-account-btn show-button@(buttonClass)">Add Account</div>
                        <button id="add-account-button" type="submit" class="btn btn-default update-account-btn @accountClass">Save Account</button>
                        <span id="add-account-cancel" class="cancel @accountClass">Cancel</span>
                    }
                    <div id="add-account-section" class="add-account @accountClass">
                        <div class="grouping">
                                    @Html.LabelFor(model => model.AccountNumber, new { @class = "control-label"})
                                    @Html.TextBoxFor(model => model.AccountNumber, new {@class = "form-control account-input", placeholder = "Account Number"})
                                    @Html.ValidationMessageFor(model => model.AccountNumber, string.Empty, new { @class= "help-block" })
                        </div>
                        <div class="grouping">
                            @*This is a hack for google chrome auto-fill. Prevents the zip field from being incorrectly filled based on form sequence*@
                            <input type="password" style="display:none;" />
                            @*End Hack*@
                                    @Html.LabelFor(model => model.Zip, new { @class = "control-label"})
                                    @Html.TextBoxFor(model => model.Zip, new {@class = "form-control account-input", placeholder = "Postal Code"})
                                    @Html.ValidationMessageFor(model => model.Zip, string.Empty, new { @class= "help-block" })
                        </div>
                    </div>
                </header>
                <div class="account-details account-set-height">
                    @if (Model.AccountShippingInformation != null)
                    {
                    <div class="shipping-info">
                        
                            
                        @*foreach (var customerAttribute in (IEnumerable<CustomerAttributes>)Model.AccountShippingInformation.OrderByDescending(m => m.AccountNumber))*@
                        @for (var i = 0; i < Model.AccountShippingInformation.Count(); i++)
                        {
                                
                            var currentAccountShippingData = Model.AccountShippingInformation.ToArray()[i];
                            if(!currentAccountShippingData.AccountNumber.Equals(currentAccount))
                            {
                                <div class="profile-account-wrapper">
                                    <div class="profile-account-info">
                                        <span class="acct-num-title">Account Number:</span>
                                        <span class="acct-num-detail">@Model.AccountShippingInformation.ToArray()[i].AccountNumber</span>
                                    </div>
                                    <div class="profile-account-info">
                                        @*<span class="acct-name-title">Account Name:</span>*@
                                        <span class="acct-name-detail">@Model.AccountShippingInformation.ToArray()[i].AccountName</span>
                                    </div>
                                </div>
                                currentAccount = currentAccountShippingData.AccountNumber;
                            }
                            <ul class="accountList acct-info-height">
                            @{
                                if(currentAccountShippingData.Nickname == null || currentAccountShippingData.Nickname == "")
                                {
                                    currentAccountShippingData.Nickname = "";
                                    if (currentAccountShippingData.OpportunityName == null)
                                    {
                                        currentAccountShippingData.Nickname = currentAccountShippingData.Address1;
                                    }
                                    else
                                    {
                                        currentAccountShippingData.Nickname = currentAccountShippingData.OpportunityName;
                                    }
                                }
                            }

                            @Html.HiddenFor(m => m.AccountShippingInformation.ToArray()[i].AccountNumber)
                            @Html.HiddenFor(m => m.AccountShippingInformation.ToArray()[i].AccountSiteNumber)
                            @Html.HiddenFor(m => m.AccountShippingInformation.ToArray()[i].PostalCode)
                                
                            <li>
                                <div class="profile-nickname-wrapper">
                                    <span class="list-class">
                                        <div class="grouping">
                                            <label><span class="field-label">Site Nickname:</span></label>
                                            @Html.TextBoxFor(m => m.AccountShippingInformation.ToArray()[i].Nickname, new { @class = "form-control nickname-input", placeholder = @currentAccountShippingData.Nickname })
                                            <a id="edit-nickname-button" type="submit" class="edit-nickname-btn" name="nick-@i"><span class="edit-icon"></span>Edit</a>
                                            <button id="save-nickname-button" type="submit" class="save-nickname-btn active" name="nick-@i"><i class="fa fa-check"></i></button>
                                            <i class="fa fa-times cancel-nickname-btn"></i>
                                        </div>
                                        <div class="grouping">
                                            <label><span class="field-label">Address:</span></label>
                                            <span class="list-content">@currentAccountShippingData.Address1</span>
                                            <span class="list-content">@currentAccountShippingData.Address2</span>
                                            <span class="list-content">@currentAccountShippingData.City, @currentAccountShippingData.State @currentAccountShippingData.PostalCode</span>
                                        </div>
                                    </span>                         
                                </div>
                            </li>
                        </ul>
                        }
                    </div>
                } 
                    else
                    {
                      <div class="validate-notice">
                          <div class="grouping">
                              <h4>Validate Your Account</h4> For full access to the site, you must have an active Starbucks account associated with your profile. For assistance setting up your Starbucks account, <a href="/forgot-account">contact a representative.</a>

                          </div>
                      </div>   
                    }
                </div>
            </section>
        }
        <section>
            <header class="credentials-set-height">
                <h3 class="detail-labels">My Sign In</h3>
                <h4>Need to change your email?</h4>
                <span class="contact"><a id="MySignIn" href="/contact-form">Contact Customer Service &raquo;</a></span>
                <div id="change-pass-action" class="btn btn-default change-pass-btn show-button">Change Password</div>
                <button id="change-pass-button" type="submit" class="btn btn-default update-pass-btn inactive">Save Password</button>
                <span id="change-pass-cancel" class="cancel inactive">Cancel</span>
            </header>
            <div class="credential-details credentials-set-height">
                <div class="grouping">
                    <label for="EmailAddress">Email</label>
                    <span class="Email">@Model.EmailAddress.ToString()</span>
                </div>
                <div id="change-pass-section" class="inactive">
                    <div class="grouping password">
                        <label><span class="control-label">Previous Password</span> @Html.ValidationMessageFor(model => model.Password, string.Empty, new { @class= "help-block" })</label>
                        <!-- @Html.LabelFor(model => model.Password, new { @class = "control-label"}) -->
                        @Html.PasswordFor(model => model.Password, new {@class = "form-control password-input", placeholder = "Old Password" })
                    </div>
                    <div class="grouping password">
                        <label><span class="control-label">New Password</span> @Html.ValidationMessageFor(model => model.NewPassword, string.Empty, new { @class= "help-block" })</label>
                        <!-- @Html.LabelFor(model => model.NewPassword, new { @class = "control-label"}) -->
                        @Html.PasswordFor(model => model.NewPassword, new {@class = "form-control password-input", placeholder = "New Password"})
                        <div id="strengthIndicator"></div>
                    </div>
                    <div class="grouping password">
                        <label><span class="control-label">Confirm Password</span></label>
                        <!-- @Html.LabelFor(model => model.ConfirmPassword, new { @class = "control-label"}) -->
                        @Html.PasswordFor(model => model.ConfirmPassword, new {@class = "form-control password-input", placeholder = "Confirm Password"})
                    </div>
                </div>
            </div>
        </section>
        <section class="last">
            <header class="profile-set-height">
                <h3 class="detail-labels">My Profile</h3>
                <h4>Need Account Help?</h4>
                <span class="contact"><a id="MyProfile" href="/contact-form">Contact Customer Service &raquo;</a></span>
                <div id="edit-profile-action" class="btn btn-default edit-profile-btn show-button">Edit Profile</div>
                <button id="edit-profile-button" type="submit" class="btn btn-default update-profile-btn inactive">Save Changes</button>
                <span id="edit-profile-cancel" class="cancel inactive">Cancel</span>
            </header>
            <div class="profile-details profile-set-height">
                <div class="grouping">
                    <label><span class="field-label">Name<span class="indicate-required">*</span></span> @Html.ValidationMessageFor(model => model.Name, string.Empty, new { @class= "help-block" })</label>
                    <!-- @Html.LabelFor(model => model.Name, new { @class = "control-label"}) -->
                    @Html.TextBoxFor(model => model.Name, new {@class = "form-control profile-input", placeholder = "Your Name"})
                    <!-- @Html.ValidationMessageFor(model => model.Name, string.Empty, new { @class= "help-block" }) -->
                </div>
                <div class="grouping">
                    <label><span class="field-label">Title<span class="indicate-required">*</span></span> @Html.ValidationMessageFor(model => model.Title, string.Empty, new { @class= "help-block" })</label>
                    <!-- @Html.LabelFor(model => model.Title, new { @class = "control-label"}) -->
                    @Html.TextBoxFor(model => model.Title, new {@class = "form-control profile-input", placeholder = "Job Title"})
                    <!-- @Html.ValidationMessageFor(model => model.Title, string.Empty, new { @class= "help-block" }) -->
                </div>
                @if (!isPartner && !isPartnerAdmin)
                {
                        <div class="grouping">
                            <label><span class="field-label">Company Name<span class="indicate-required">*</span></span> @Html.ValidationMessageFor(model => model.CompanyName, string.Empty, new { @class= "help-block" })</label>
                            <!-- @Html.LabelFor(model => model.CompanyName, new { @class = "control-label"}) -->
                            @Html.TextBoxFor(model => model.CompanyName, new {@class = "form-control profile-input", placeholder = "Company Name"})
                            <!-- @Html.ValidationMessageFor(model => model.CompanyName, string.Empty, new { @class= "help-block" }) -->
                        </div>
                }
              <div class="profile-two-column">
              @if (!isPartner && !isPartnerAdmin)
              {
                        <div class="grouping">
                            <label><span class="field-label">City<span class="indicate-required">*</span></span> @Html.ValidationMessageFor(model => model.City, string.Empty, new { @class= "help-block" })</label>
                            <!-- @Html.LabelFor(model => model.City, new { @class = "control-label"}) -->
                            @Html.TextBoxFor(model => model.City, new {@class = "form-control profile-input", placeholder = "City"})
                            <!-- @Html.ValidationMessageFor(model => model.City, string.Empty, new { @class= "help-block" }) -->
                        </div>
                        <div class="grouping">
                            <label><span class="field-label">State<span class="indicate-required">*</span></span> @Html.ValidationMessageFor(model => model.State, string.Empty, new { @class= "help-block" })</label>
                            <!-- @Html.LabelFor(model => model.State, new { @class = "control-label"}) -->
                            @Html.TextBoxFor(model => model.State, new {@class = "form-control profile-input", placeholder = "State"})
                            <!-- @Html.ValidationMessageFor(model => model.State, string.Empty, new { @class= "help-block" }) -->
                
                        </div>
              }
 
                    <div class="grouping">
                        <label><span class="field-label">Phone<span class="indicate-required">*</span></span> @Html.ValidationMessageFor(model => model.Phone, string.Empty, new { @class= "help-block" })</label>
                        <!-- @Html.LabelFor(model => model.Phone, new { @class = "control-label"}) -->
                        @Html.TextBoxFor(model => model.Phone, new {@class = "form-control profile-input", placeholder = "Phone Number"})
                        <!-- @Html.ValidationMessageFor(model => model.Phone, string.Empty, new { @class= "help-block" }) -->
                    </div>
                    <div class="grouping">
                        <label><span class="field-label">Mobile Phone</span> @Html.ValidationMessageFor(model => model.MobilePhone, string.Empty, new { @class= "help-block" })</label>
                        <!-- @Html.LabelFor(model => model.MobilePhone, new { @class = "control-label"}) -->
                        @Html.TextBoxFor(model => model.MobilePhone, new {@class = "form-control profile-input", placeholder = "Mobile Phone"})
                        <!-- @Html.ValidationMessageFor(model => model.MobilePhone, string.Empty, new { @class= "help-block" }) -->
                    </div>
                    <div class="grouping">
                        <label for="OptionalDetails"><span class="field-label">Extension</span></label>
                        @Html.TextBoxFor(model => model.OptionalDetails, new{ @class = "form-control profile-input", placeholder = "Extension" })
                    </div>
                    <div class="grouping">
                        <div class="required-notice">*Indicates Required Field</div>
                    </div>
                </div>
            </div>
        </section>
        
            @Html.HiddenFor(model => model.MemberID)
            @Html.HiddenFor(model => model.Attempts)
            @Html.HiddenFor(model => model.EmailAddress)
        @if (isPartner || isPartnerAdmin)
        {
            @Html.HiddenFor(model => model.CompanyName, new {Value = "Starbucks"})
            @Html.HiddenFor(model => model.City, new { Value = "Seattle"})
            @Html.HiddenFor(model => model.State, new {Value = "Washington"})
        }

    </fieldset>
}

@section scripts {
    @if (!String.IsNullOrEmpty(TempData["BrandInfo"].ToString()) && track)
    {
        <script type="text/javascript">
            _kmq.push(['record', 'Account Added', { 'Account brand': '@(TempData["BrandInfo"].ToString())' }]);   
          
        </script>
    }
    @if(track)
    {
        <script type="text/javascript">
               $('#MyAccounts, #MySignIn, #MyProfile').on('click touch', function () {

                   _kmq.push(['record', 'Contact Customer Service', { 'Profile Section': $(this).attr("id") }]);
               });
               $('#add-account-button').on('click touch', function () {
                   _kmq.push(['record', 'Profile Save Account']);
               });
               $('#change-pass-button').on('click touch', function () {
                   _kmq.push(['record', 'Profile Save New Password']);
               });
               $('#edit-profile-button').on('click touch', function () {
                   _kmq.push(['record', 'Edit Profile']);
               });
         </script>
    } 
 }